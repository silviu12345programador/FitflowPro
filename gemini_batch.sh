#!/usr/bin/env bash
# gemini_batch.sh – Recorre muchos prompts, uno por uno.

set -euo pipefail

# ─── Carpeta temporal DENTRO del proyecto ─────────────────────────────
TMPDIR="$(mktemp -d "$PWD/.gemini_prompts.XXXXXX")"
trap 'rm -rf "$TMPDIR"' EXIT         # limpieza automática

# ─── Fuente de prompts ────────────────────────────────────────────────
if [[ $# -gt 0 && -f "$1" ]]; then
  mapfile -t prompts < "$1"          # un prompt por línea de archivo
else
 prompts=(
  $'# User Story: Etiquetado de Plantillas para Mejor Organización\n\n## Descripción\nComo entrenador personal, quiero poder añadir etiquetas (ej. \'Hipertrofia\', \'Principiante\', \'4 días\') al guardar un plan como plantilla en la `SaveAsTemplateModal`, para poder filtrar y encontrar plantillas relevantes más fácilmente.\n\n## Contexto de la Página\nCreador de Planes de Entrenamiento\n\n## Archivos Afectados\n- @src/features/creador-de-planes-de-entrenamiento/components/SaveAsTemplateModal.tsx\n- @src/features/creador-de-planes-de-entrenamiento/components/ImportFromTemplateModal.tsx\n- @src/features/creador-de-planes-de-entrenamiento/api.ts\n\n## Componentes a Crear\n- TagInput (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/creador-de-planes-de-entrenamiento/components\n\n## Módulos a Importar\n- SaveAsTemplateModal from src/features/creador-de-planes-de-entrenamiento/components/SaveAsTemplateModal.tsx\n- ImportFromTemplateModal from src/features/creador-de-planes-de-entrenamiento/components/ImportFromTemplateModal.tsx\n\n## Lógica y Datos\nLa entidad \'Plantilla\' en la base de datos necesita un nuevo campo, `tags`, que sería un array de strings. La llamada a la API en `api.ts` para guardar la plantilla debe incluir este nuevo campo. La llamada para obtener plantillas debe permitir filtrar por etiquetas.\n\n## Estilos\n- Framework: tailwind\n- Clases: bg-blue-100 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full\n- Codificación de colores: Usar un estilo de \'píldora\' o \'badge\' para las etiquetas, con colores consistentes.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. En el modal de guardar plantilla, debe haber un campo para añadir etiquetas.\n2. El usuario puede añadir múltiples etiquetas a una plantilla antes de guardarla.\n3. En el modal de importar plantilla, las etiquetas deben mostrarse junto a cada plantilla.\n4. Debe existir una forma de filtrar la lista de plantillas basándose en una o más etiquetas.\n\n## Sugerencias Adicionales\n- Sugerir etiquetas usadas anteriormente para promover la consistencia.\n\n## Tarea para Editor IA\nCrea un componente `TagInput`. Intégralo en `SaveAsTemplateModal.tsx` y modifica la carga útil de la API para incluir las etiquetas. Luego, en `ImportFromTemplateModal.tsx`, añade un campo de filtro y la lógica para filtrar la lista de plantillas mostrada basándose en las etiquetas de cada una.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/creador-de-planes-de-entrenamiento/components\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Filtro de \'Usados Recientemente\' en la Biblioteca de Ejercicios\n\n## Descripción\nComo entrenador personal, quiero tener una pestaña o filtro de \'Usados Recientemente\' en el `ExerciseLibraryPanel`, para acceder rápidamente a los ejercicios que uso con más frecuencia y acelerar la creación de planes.\n\n## Contexto de la Página\nCreador de Planes de Entrenamiento\n\n## Archivos Afectados\n- @src/features/creador-de-planes-de-entrenamiento/components/ExerciseLibraryPanel.tsx\n- @src/features/creador-de-planes-de-entrenamiento/hooks/useCreadordePlanesdeEntrenamiento.ts\n\n## Módulos a Importar\n- ExerciseLibraryPanel from src/features/creador-de-planes-de-entrenamiento/components/ExerciseLibraryPanel.tsx\n\n## Lógica y Datos\nEl hook `useCreadordePlanesdeEntrenamiento` (o un hook de contexto más global) deberá gestionar una lista de IDs de ejercicios usados recientemente. Cada vez que se añade un ejercicio al plan, su ID se añade al principio de esta lista (y se eliminan duplicados). La lista puede ser persistida en `localStorage` y limitada a los últimos 20-30 ejercicios.\n\n## Estilos\n- Framework: tailwind\n- Clases: border-b-2 border-transparent hover:border-blue-500 hover:text-blue-600, border-b-2 border-blue-500 text-blue-600\n- Codificación de colores: Usar un estilo de pestañas estándar para la navegación.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. El panel de la biblioteca de ejercicios debe tener una pestaña o filtro \'Recientes\'.\n2. Al hacer clic en \'Recientes\', la lista se actualiza para mostrar solo los últimos X ejercicios añadidos por el entrenador.\n3. La lista de recientes debe estar ordenada del más al menos reciente.\n4. La lista de recientes debe persistir entre sesiones (usando localStorage).\n5. Añadir un nuevo ejercicio a un plan debe actualizar la lista de \'Recientes\'.\n\n## Sugerencias Adicionales\n- Considerar también una pestaña de \'Favoritos\' que el usuario pueda gestionar manualmente.\n\n## Tarea para Editor IA\nModifica el hook `useCreadordePlanesdeEntrenamiento` para gestionar una lista de ejercicios recientes en `localStorage`. Expón esta lista. En `ExerciseLibraryPanel.tsx`, añade una interfaz de pestañas. Cuando la pestaña \'Recientes\' esté activa, filtra la lista completa de ejercicios para mostrar solo aquellos cuyos IDs están en la lista de recientes.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/creador-de-planes-de-entrenamiento/components\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Expansión de Grupos para Crear Trisets y Giant Sets\n\n## Descripción\nComo entrenador personal, quiero poder agrupar más de dos ejercicios en un `SupersetGroup` para crear \'Trisets\' o \'Giant Sets\', para diseñar rutinas de alta intensidad más complejas.\n\n## Contexto de la Página\nCreador de Planes de Entrenamiento\n\n## Archivos Afectados\n- @src/features/creador-de-planes-de-entrenamiento/components/SupersetGroup.tsx\n\n## Módulos a Importar\n- SupersetGroup from src/features/creador-de-planes-de-entrenamiento/components/SupersetGroup.tsx\n\n## Lógica y Datos\nLa estructura de datos de un grupo deberá cambiar de un objeto con `exercise1` y `exercise2` a un array `exercises`. La lógica de arrastrar y soltar deberá ser actualizada para permitir soltar un ejercicio dentro de un grupo existente que ya contiene dos o más ejercicios.\n\n## Estilos\n- Framework: tailwind\n- Clases: border-l-4 border-dashed border-gray-400 pl-4\n- Codificación de colores: Mantener la misma estética visual (borde o fondo) que une los ejercicios, simplemente extendiéndola para abarcar a todos los ejercicios del grupo.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Se puede arrastrar un tercer ejercicio a una superserie existente para convertirla en una triserie.\n2. El componente `SupersetGroup` debe renderizar correctamente 3 o más ejercicios.\n3. El título o indicador visual debe reflejar si es una superserie (2), triserie (3), etc.\n4. Se puede reordenar y eliminar ejercicios dentro de un grupo de más de 2 ejercicios.\n5. La configuración de descanso se aplica después de completar todos los ejercicios del grupo.\n\n## Sugerencias Adicionales\n- Añadir un campo para configurar el descanso entre los ejercicios dentro del mismo grupo (que suele ser cero o muy bajo).\n\n## Tarea para Editor IA\nRefactoriza el componente `SupersetGroup.tsx`. Cambia su estado y props para que acepten un array de ejercicios. Actualiza el JSX para mapear sobre este array y renderizar cada ejercicio. Asegúrate de que las acciones como eliminar o reordenar funcionen correctamente con el array.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/creador-de-planes-de-entrenamiento/components\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Copia Rápida de Ejercicio al Día Siguiente\n\n## Descripción\nComo entrenador personal, quiero un botón para \'Copiar al día siguiente\' dentro de cada ejercicio, para duplicar rápidamente un ejercicio con toda su configuración a la siguiente jornada de entrenamiento.\n\n## Contexto de la Página\nCreador de Planes de Entrenamiento\n\n## Archivos Afectados\n- @src/features/creador-de-planes-de-entrenamiento/components/ExerciseDetailEditor.tsx\n- @src/features/creador-de-planes-de-entrenamiento/hooks/useCreadordePlanesdeEntrenamiento.ts\n\n## Módulos a Importar\n- ExerciseDetailEditor from src/features/creador-de-planes-de-entrenamiento/components/ExerciseDetailEditor.tsx\n\n## Lógica y Datos\nEl hook `useCreadordePlanesdeEntrenamiento` debe exponer una nueva función, `copyExerciseToNextDay(dayIndex, exerciseIndex)`. Esta función localizará el día siguiente, si existe, y añadirá una copia del ejercicio especificado al final de la lista de ejercicios de ese día.\n\n## Estilos\n- Framework: tailwind\n- Clases: text-gray-500 hover:text-blue-600 transition-colors\n- Codificación de colores: El icono debe ser sutil y estar alineado con los otros iconos de acción como \'duplicar\' o \'eliminar\'.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Cada bloque de ejercicio debe tener un icono para \'Copiar al día siguiente\'.\n2. Al hacer clic, una copia exacta del ejercicio (incluyendo series, reps, peso, notas) debe aparecer al final del siguiente día de entrenamiento.\n3. Si no hay un \'día siguiente\', el botón debe estar deshabilitado o no ser visible.\n4. La acción debe ser rápida y mostrar una notificación sutil de éxito (ej. \'Ejercicio copiado a Día 2\').\n\n## Sugerencias Adicionales\n- Permitir \'Copiar a...\' que abra un modal para seleccionar cualquier día del plan.\n\n## Tarea para Editor IA\nEn `useCreadordePlanesdeEntrenamiento.ts`, añade una nueva función para copiar un ejercicio a otro día. Pasa esta función como prop hasta `ExerciseDetailEditor.tsx`. En este componente, añade un nuevo `button` con un icono que, al ser clickeado, llame a la función de copia con los índices correctos.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/creador-de-planes-de-entrenamiento/components\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Minimizar/Expandir Días de Entrenamiento\n\n## Descripción\nComo entrenador personal, quiero poder colapsar (minimizar) los `WorkoutDayContainer` para ocultar los detalles de los ejercicios, para tener una vista general más limpia del plan y concentrarme en el día que estoy editando.\n\n## Contexto de la Página\nCreador de Planes de Entrenamiento\n\n## Archivos Afectados\n- @src/features/creador-de-planes-de-entrenamiento/components/WorkoutDayContainer.tsx\n- @src/features/creador-de-planes-de-entrenamiento/components/PlanMetadataHeader.tsx\n\n## Módulos a Importar\n- WorkoutDayContainer from src/features/creador-de-planes-de-entrenamiento/components/WorkoutDayContainer.tsx\n- PlanMetadataHeader from src/features/creador-de-planes-de-entrenamiento/components/PlanMetadataHeader.tsx\n\n## Lógica y Datos\nCada `WorkoutDayContainer` necesitará su propio estado local para gestionar si está colapsado o no (`const [isCollapsed, setIsCollapsed] = useState(false)`). La función de \'colapsar todos\' necesitará una forma de comunicar este cambio a todos los contenedores, posiblemente a través de un estado gestionado en el hook principal.\n\n## Estilos\n- Framework: tailwind\n- Clases: cursor-pointer, transition-transform duration-300\n- Codificación de colores: El icono de chevron debe rotar suavemente en la transición.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Al hacer clic en la cabecera de un `WorkoutDayContainer`, su contenido (lista de ejercicios) se oculta o se muestra.\n2. Un icono en la cabecera debe indicar si el día está expandido o colapsado.\n3. El estado de colapso de cada día debe ser independiente.\n4. Deben existir botones globales para \'Expandir Todos\' y \'Colapsar Todos\'.\n5. Cuando un día está colapsado, su cabecera debe seguir mostrando información clave como el nombre del día y la duración estimada.\n\n## Sugerencias Adicionales\n- Recordar el estado de colapso de los días si el usuario navega fuera y vuelve a la página.\n\n## Tarea para Editor IA\nEn `WorkoutDayContainer.tsx`, introduce un estado `isCollapsed`. Haz que el `div` de la cabecera sea un botón que cambie este estado. Usa renderizado condicional para mostrar u ocultar el `div` que contiene la lista de ejercicios. Agrega un icono de chevron que rote según el estado. Luego, en el componente padre, añade los botones de control global que actualicen el estado de todos los días.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/creador-de-planes-de-entrenamiento/components\n Cuando termines, escribe: TAREA COMPLETADA.'
)
fi
# ──────────────────────────────────────────────────────────────────────

for i in "${!prompts[@]}"; do
  prompt="${prompts[$i]}"
  [[ -z $prompt ]] && continue       # salta vacíos

  file="$TMPDIR/prompt_$i.md"
  printf '%s\n' "$prompt" > "$file"

  echo ">>> Ejecutando prompt $((i+1))"
  ./gemini_one.sh "$file"
  echo "---------------------------------------------"
done
