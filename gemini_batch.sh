#!/usr/bin/env bash
# gemini_batch.sh – Recorre muchos prompts, uno por uno.

set -euo pipefail

# ─── Carpeta temporal DENTRO del proyecto ─────────────────────────────
TMPDIR="$(mktemp -d "$PWD/.gemini_prompts.XXXXXX")"
trap 'rm -rf "$TMPDIR"' EXIT         # limpieza automática

# ─── Fuente de prompts ────────────────────────────────────────────────
if [[ $# -gt 0 && -f "$1" ]]; then
  mapfile -t prompts < "$1"          # un prompt por línea de archivo
else
  prompts=(                          # <── tus user-stories
   $'# User Story: Ajustar cantidad y unidad de un alimento en una comida\n\n## Descripción\nComo nutricionista, quiero poder ajustar con precisión la cantidad (ej. de 100g a 150g) y la unidad (ej. de \'g\' a \'taza\') de cada alimento añadido a una comida, para personalizar las porciones y macros del plan.\n\n## Contexto de la Página\nCreador de Planes de Nutrición\n\n## Archivos Afectados\n- @src/features/creador-de-planes-de-nutricin/CreadordePlanesdeNutriciónPage.tsx\n- @src/features/creador-de-planes-de-nutricin/hooks/useCreadordePlanesdeNutrición.ts\n- @src/features/creador-de-planes-de-nutricin/components/MealItemEditor.tsx\n\n## Componentes a Crear\n- MealItemEditor (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/creador-de-planes-de-nutricin/components\n\n## Lógica y Datos\nEste componente será renderizado para cada alimento en una comida. Recibirá las propiedades del alimento (nombre, macros base, cantidad actual) y una función \'onUpdate\' del componente padre. Al cambiar la cantidad o unidad, el componente calculará los nuevos macros para ese ítem y llamará a \'onUpdate\' con los nuevos datos, lo que a su vez actualizará el estado global en el hook \'useCreadordePlanesdeNutrición\' y provocará el re-cálculo de los totales en \'MacroSummaryHeader\'.\n\n## Estilos\n- Framework: tailwind\n- Clases: flex items-center justify-between p-2 bg-gray-700 rounded my-1, input: w-20 bg-gray-600 text-white text-center, macros: text-xs text-gray-400\n- Codificación de colores: Fondo ligeramente más claro que el contenedor de la comida para diferenciar las filas. Inputs claros y concisos.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Cada alimento en una comida debe renderizarse usando este componente.\n2. Debe mostrar un campo de entrada numérico para la cantidad, pre-rellenado con el valor actual.\n3. Cambiar el valor en el input de cantidad debe actualizar inmediatamente los macros de esa línea y los totales del plan.\n4. Si el alimento tiene múltiples unidades de medida disponibles (ej. g, oz, taza), debe haber un selector para cambiarlas.\n5. Debe haber un botón para eliminar el alimento de la comida.\n\n## Sugerencias Adicionales\n- Añadir botones de incremento/decremento rápido (+/-) junto al campo de cantidad.\n- Mostrar una advertencia si la cantidad introducida es irrazonablemente alta.\n\n## Tarea para Editor IA\nCrear el componente \'MealItemEditor.tsx\' en \'src/features/creador-de-planes-de-nutricin/components/\'. El componente debe ser autocontenido para la edición de una línea de alimento. Debe calcular y mostrar macros para su propia cantidad y notificar al padre de los cambios a través de props.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/creador-de-planes-de-nutricin\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Definir objetivos de macronutrientes para el plan\n\n## Descripción\nComo entrenador, quiero establecer los objetivos totales de calorías y macronutrientes (en gramos o porcentajes) para el plan, para tener una referencia clara contra la cual construir la dieta.\n\n## Contexto de la Página\nCreador de Planes de Nutrición\n\n## Archivos Afectados\n- @src/features/creador-de-planes-de-nutricin/CreadordePlanesdeNutriciónPage.tsx\n- @src/features/creador-de-planes-de-nutricin/hooks/useCreadordePlanesdeNutrición.ts\n- @src/features/creador-de-planes-de-nutricin/components/PlanTargetSetter.tsx\n\n## Componentes a Crear\n- PlanTargetSetter (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/creador-de-planes-de-nutricin/components\n\n## Módulos a Importar\n- Button from src/components/Button.jsx\n\n## Lógica y Datos\nEste componente actualizará una parte específica del estado en \'useCreadordePlanesdeNutrición\' dedicada a los objetivos del plan. Incluirá lógica para la conversión entre porcentajes y gramos (ej. 1g Proteína/Carbohidrato = 4 kcal, 1g Grasa = 9 kcal). Los valores establecidos aquí serán los que \'MacroSummaryHeader\' use como referencia para sus barras de progreso.\n\n## Estilos\n- Framework: tailwind\n- Clases: bg-gray-800 p-4 rounded-lg space-y-3, input-group: flex items-center justify-between\n- Codificación de colores: Inputs claros, con etiquetas descriptivas. Podría usar sliders además de inputs de texto para una UX más interactiva.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe haber un campo para introducir el objetivo calórico total.\n2. Debe haber una opción para elegir si se definen los macros por porcentaje o por gramos.\n3. Si se elige porcentaje, tres campos (Proteína, Carbs, Grasa) deben sumar 100%.\n4. Si se elige gramos, debe haber tres campos para los gramos de cada macronutriente.\n5. Al establecer los objetivos, estos deben reflejarse inmediatamente en el \'MacroSummaryHeader\'.\n6. El sistema debe validar que los porcentajes sumen 100% o que los gramos introducidos se correspondan aproximadamente con las calorías objetivo.\n\n## Sugerencias Adicionales\n- Sugerir objetivos basados en datos del cliente (si se está creando el plan para un cliente específico del CRM).\n- Guardar conjuntos de objetivos como presets (ej. \'Volumen\', \'Definición\').\n\n## Tarea para Editor IA\nCrear el componente \'PlanTargetSetter.tsx\' en \'src/features/creador-de-planes-de-nutricin/components/\'. Implementar la lógica de entrada y el cambio entre modo porcentaje y gramos. Asegurar que actualiza el estado de objetivos en el hook \'useCreadordePlanesdeNutrición\'.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/creador-de-planes-de-nutricin\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Guardar el plan de nutrición completo\n\n## Descripción\nComo nutricionista, quiero guardar el plan de nutrición completo (con su estructura, alimentos, y cantidades) para poder asignarlo a un cliente o editarlo más tarde.\n\n## Contexto de la Página\nCreador de Planes de Nutrición\n\n## Archivos Afectados\n- @src/features/creador-de-planes-de-nutricin/CreadordePlanesdeNutriciónPage.tsx\n- @src/features/creador-de-planes-de-nutricin/api.ts\n- @src/features/creador-de-planes-de-nutricin/hooks/useCreadordePlanesdeNutrición.ts\n- @src/features/creador-de-planes-de-nutricin/components/PlanActionsToolbar.tsx\n\n## Componentes a Crear\n- PlanActionsToolbar (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/creador-de-planes-de-nutricin/components\n\n## Módulos a Importar\n- Button from src/components/Button.jsx\n\n## Lógica y Datos\nEl botón \'Guardar\' en este componente activará una función en el hook \'useCreadordePlanesdeNutrición\'. Esta función recopilará el estado completo del plan (estructura, alimentos, cantidades, objetivos) y lo enviará a la API a través de una llamada en \'api.ts\' (ej. POST /api/nutrition-plans o PUT /api/nutrition-plans/:id si se está editando). Se debe manejar el estado de carga y los posibles errores de la API.\n\n## Estilos\n- Framework: tailwind\n- Clases: flex items-center space-x-2 p-2 bg-gray-900 border-t border-gray-700\n- Codificación de colores: Botón principal de \'Guardar\' destacado con un color primario (ej. azul brillante). Otros botones con un estilo más sutil.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe existir un botón \'Guardar\' claramente visible.\n2. Al hacer clic en \'Guardar\', el estado completo del plan actual debe ser enviado a la API.\n3. Mientras se guarda, el botón debe mostrar un estado de carga (ej. un spinner) y deshabilitarse para evitar clics múltiples.\n4. Tras un guardado exitoso, se debe mostrar una notificación de éxito (ej. un \'toast\').\n5. Si ocurre un error durante el guardado, se debe mostrar un mensaje de error detallado.\n\n## Sugerencias Adicionales\n- Implementar una función de autoguardado cada pocos minutos para evitar la pérdida de trabajo.\n- El botón \'Guardar\' podría cambiar de color para indicar que hay cambios sin guardar.\n\n## Tarea para Editor IA\nCrear el componente \'PlanActionsToolbar.tsx\' en \'src/features/creador-de-planes-de-nutricin/components/\'. Integrar botones de acción que, al ser presionados, invoquen las funciones de guardado definidas en el hook \'useCreadordePlanesdeNutrición\', las cuales a su vez llaman a la API.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/creador-de-planes-de-nutricin\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Generar un resumen del plan para el cliente\n\n## Descripción\nComo entrenador, quiero generar una vista de resumen limpia y fácil de leer del plan de nutrición, para poder compartirla con mi cliente en un formato imprimible o PDF.\n\n## Contexto de la Página\nCreador de Planes de Nutrición\n\n## Archivos Afectados\n- @src/features/creador-de-planes-de-nutricin/CreadordePlanesdeNutriciónPage.tsx\n- @src/features/creador-de-planes-de-nutricin/components/PlanSummaryView.tsx\n\n## Componentes a Crear\n- PlanSummaryView (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/creador-de-planes-de-nutricin/components\n\n## Módulos a Importar\n- Button from src/components/Button.jsx\n\n## Lógica y Datos\nEste componente se mostrará en un modal o una página separada. Tomará el objeto del plan completo como prop. La lógica se centrará en la presentación de los datos. Para la exportación a PDF, se puede integrar una librería como \'html2pdf.js\' o \'jsPDF\' que capture el contenido renderizado del componente y lo convierta en un archivo descargable.\n\n## Estilos\n- Framework: tailwind\n- Clases: p-8 bg-white text-black font-sans, h2:text-2xl font-bold mt-4 mb-2, table: w-full border-collapse, th,td: border p-2\n- Codificación de colores: Estilo limpio y profesional, similar a un documento, con alto contraste (texto negro sobre fondo blanco) para facilitar la lectura y la impresión.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe haber una opción \'Ver Resumen\' o \'Exportar\' en el creador de planes.\n2. Al activarla, se muestra el componente \'PlanSummaryView\' con los datos del plan actual.\n3. El resumen debe estar organizado por días y, dentro de cada día, por comidas.\n4. Cada comida debe listar los alimentos con sus cantidades y unidades.\n5. Al final de cada día, debe mostrarse un total de calorías y macronutrientes para ese día.\n6. Debe haber un botón \'Descargar PDF\' que genere y descargue un archivo PDF del resumen.\n\n## Sugerencias Adicionales\n- Permitir al entrenador añadir su logo y notas personalizadas al resumen antes de exportar.\n- Incluir una sección con una lista de compras generada automáticamente a partir de los alimentos del plan.\n\n## Tarea para Editor IA\nCrear el componente \'PlanSummaryView.tsx\' en \'src/features/creador-de-planes-de-nutricin/components/\'. Enfocarse en la maquetación y el estilo para impresión. Implementar la funcionalidad de exportación a PDF usando una librería apropiada.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/creador-de-planes-de-nutricin\n Cuando termines, escribe: TAREA COMPLETADA.'
  )
fi
# ──────────────────────────────────────────────────────────────────────

for i in "${!prompts[@]}"; do
  prompt="${prompts[$i]}"
  [[ -z $prompt ]] && continue       # salta vacíos

  file="$TMPDIR/prompt_$i.md"
  printf '%s\n' "$prompt" > "$file"

  echo ">>> Ejecutando prompt $((i+1))"
  ./gemini_one.sh "$file"
  echo "---------------------------------------------"
done
