#!/usr/bin/env bash
# gemini_batch.sh - Envía una serie de prompts a Gemini CLI en modo YOLO (sin estado)

set -euo pipefail

# Comprueba si se pasa un archivo de prompts como primer argumento
# Cada línea del archivo será tratada como un prompt independiente.
if [[ $# -gt 0 && -f "$1" ]]; then
  mapfile -t prompts < "$1"
else
  # ↳ Lista de prompts integrada (edita o añade los que necesites)
prompts=(
$'# User Story: Formulario para Registrar Nuevas Mediciones de Progreso\n\n## Descripción\nComo entrenador, quiero un formulario rápido y sencillo para registrar nuevas mediciones de progreso del cliente (ej. peso, medidas corporales) directamente en su perfil, para mantener los datos del gráfico actualizados.\n\n## Contexto de la Página\nPerfil del Cliente\n\n## Archivos Afectados\n- @src/features/perfil-del-cliente/PerfildelClientePage.tsx\n- @src/features/perfil-del-cliente/api.ts\n- @src/features/perfil-del-cliente/components/LogProgressForm.tsx\n\n## Componentes a Crear\n- LogProgressForm (component)\n\nLos componentes a crear se deben crear en la carpeta src/features/perfil-del-cliente/components\n\n## Módulos a Importar\n- Button from src/components/Button.jsx\n\n## Lógica y Datos\nEl componente manejará su propio estado de formulario. Al enviar, llamará a una función (proporcionada por el hook `usePerfildelCliente`) que realiza una petición POST a `/api/clients/:id/metrics` con la nueva medición. Tras el éxito, debería desencadenar una actualización de los datos del gráfico.\n\n## Estilos\n- Framework: tailwind\n- Clases: bg-gray-50 dark:bg-gray-700 p-4 rounded-lg flex space-x-2 items-end\n- Codificación de colores: Diseño compacto y funcional. El botón de envío debe usar el color de acento principal.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe haber un formulario visible para registrar progreso.\n2. El formulario debe incluir un selector de fecha, un dropdown para el tipo de métrica y un campo para el valor.\n3. Al hacer clic en \\'Registrar\\', los datos se envían al backend.\n4. Después de un registro exitoso, el formulario se debe limpiar y el gráfico de progreso debe actualizarse para incluir el nuevo punto de datos.\n5. Se debe mostrar un mensaje de confirmación o error tras el envío.\n\n## Sugerencias Adicionales\n- Permitir registrar múltiples métricas a la vez antes de enviar.\n- Validar que el valor introducido sea numérico.\n\n## Tarea para Editor IA\nCrea el componente `LogProgressForm.tsx` en `src/features/perfil-del-cliente/components/`. Debe contener un formulario con un input de fecha, un `select` para el tipo de métrica y un input numérico para el valor. Al enviar, debe invocar la función `onLogProgress` pasada como prop con los datos del formulario.\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/perfil-del-cliente\n  NO HAGAS TEST, NO EJECUTES NPM RUN DEV, SOLO CREA LA FUNCION SIN NADA MÁS Ademas cuando termines la tarea tienes que escribir TAREACOMPLETADA'
$'# User Story: Visualización del Resumen del Plan de Nutrición Asignado\n\n## Descripción\nComo entrenador, quiero ver un resumen del plan de nutrición del cliente, incluyendo sus objetivos calóricos y de macronutrientes, para evaluar su adherencia y hacer recomendaciones rápidas.\n\n## Contexto de la Página\nPerfil del Cliente\n\n## Archivos Afectados\n- @src/features/perfil-del-cliente/PerfildelClientePage.tsx\n- @src/features/perfil-del-cliente/components/NutritionPlanSummary.tsx\n\n## Componentes a Crear\n- NutritionPlanSummary (component)\n\nLos componentes a crear se deben crear en la carpeta src/features/perfil-del-cliente/components\n\n## Módulos a Importar\n- Button from src/components/Button.jsx\n\n## Lógica y Datos\nEl componente recibirá el `activeNutritionPlan` del cliente. Este objeto contendrá los datos de `targetCalories`, `targetProtein`, `targetCarbs` y `targetFats`. Si no hay plan, mostrará un estado vacío con una llamada a la acción.\n\n## Estilos\n- Framework: tailwind\n- Clases: bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md grid grid-cols-2 gap-4\n- Codificación de colores: Asignar un color distintivo a cada macronutriente (ej. azul para proteína, naranja para carbohidratos, amarillo para grasas) para las visualizaciones.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe mostrarse una sección dedicada al plan de nutrición.\n2. Los objetivos de calorías totales, proteínas, carbohidratos y grasas deben ser claramente visibles.\n3. Debe haber un botón o enlace para ver los detalles completos del plan de nutrición.\n4. Si no hay un plan de nutrición asignado, se debe mostrar un mensaje apropiado.\n\n## Sugerencias Adicionales\n- Añadir un botón para \\'Asignar/Cambiar Plan\\' que abra un modal de selección de planes de nutrición.\n- Mostrar una comparación rápida entre los objetivos y el consumo real si se integra con una app de seguimiento de alimentos.\n\n## Tarea para Editor IA\nCrea el componente `NutritionPlanSummary.tsx` en `src/features/perfil-del-cliente/components/`. Debe recibir `activeNutritionPlan` como prop y mostrar los objetivos calóricos y de macros en un formato visualmente atractivo, como tarjetas individuales para cada métrica. Incluir un botón para \\'Ver Dieta Completa\\'.\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/perfil-del-cliente\nNO HAGAS TEST, NO EJECUTES NPM RUN DEV, SOLO CREA LA FUNCION SIN NADA MÁS Ademas cuando termines la tarea tienes que escribir TAREACOMPLETADA',
$'# User Story: Visualización de la Tarjeta de Encabezado del Cliente\n\n## Descripción\nComo entrenador, quiero ver una tarjeta de encabezado con la información clave del cliente (foto, nombre, email, objetivos) para identificarlo rápidamente y tener a mano su información de contacto y metas principales.\n\n## Contexto de la Página\nPerfil del Cliente\n\n## Archivos Afectados\n- @src/features/perfil-del-cliente/PerfildelClientePage.tsx\n- @src/features/perfil-del-cliente/hooks/usePerfildelCliente.ts\n- @src/features/perfil-del-cliente/api.ts\n- @src/features/perfil-del-cliente/components/ClientHeaderCard.tsx\n\n## Componentes a Crear\n- ClientHeaderCard (component)\n\nLos componentes a crear se deben crear en la carpeta src/features/perfil-del-cliente/components\n\n## Lógica y Datos\nEl componente debe recibir los datos del cliente (obtenidos por el hook `usePerfildelCliente` que llama a la API en `api.ts` con el `clientId`). La información a mostrar incluye: `avatarUrl`, `fullName`, `email`, `phone` y un array de `goals`.\n\n## Estilos\n- Framework: tailwind\n- Clases: bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md flex items-center space-x-4\n- Codificación de colores: Utilizar colores primarios del tema para el nombre del cliente y colores neutros para la información de contacto.\n\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Al cargar la página, se debe mostrar una tarjeta en la parte superior.\n2. La tarjeta debe contener la foto de perfil, el nombre completo, el email y el teléfono del cliente.\n3. Debajo de la información de contacto, se debe mostrar una lista de los objetivos principales del cliente.\n4. La información mostrada debe corresponder al cliente del ID en la URL.\n\n## Sugerencias Adicionales\n- Añadir un indicador de estado (ej. \\'Activo\\', \\'Inactivo\\') en la tarjeta.\n- Hacer que el email y el teléfono sean enlaces \\'mailto:\\' y \\'tel:\\' respectivamente.\n\n## Tarea para Editor IA\nCrea el componente `ClientHeaderCard.tsx` en `src/features/perfil-del-cliente/components/`. Debe aceptar un objeto `client` como prop y renderizar su avatar, nombre, información de contacto y una lista de objetivos.\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/perfil-del-cliente\nNO HAGAS TEST, NO EJECUTES NPM RUN DEV, SOLO CREA LA FUNCION SIN NADA MÁS Ademas cuando termines la tarea tienes que escribir TAREACOMPLETADA'
)



fi

# Recorre y envía cada prompt a Gemini CLI
for prompt in "${prompts[@]}"; do
  [[ -z "$prompt" ]] && continue        # salta líneas vacías
  gemini -y -p "$prompt"                # -y = YOLO, -p = prompt único
  echo "---------------------------------------------"
done
