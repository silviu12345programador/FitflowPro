#!/usr/bin/env bash
# gemini_batch.sh – Recorre muchos prompts, uno por uno.

set -euo pipefail

# ─── Carpeta temporal DENTRO del proyecto ─────────────────────────────
TMPDIR="$(mktemp -d "$PWD/.gemini_prompts.XXXXXX")"
trap 'rm -rf "$TMPDIR"' EXIT         # limpieza automática

# ─── Fuente de prompts ────────────────────────────────────────────────
if [[ $# -gt 0 && -f "$1" ]]; then
  mapfile -t prompts < "$1"          # un prompt por línea de archivo
else
prompts=(
   $'# User Story: Visualización de Plantillas en Tarjetas Interactivas\n\n## Descripción\nComo entrenador, quiero ver mis plantillas de entrenamiento y nutrición en una cuadrícula de tarjetas visuales para poder identificar y seleccionar rápidamente la que necesito.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/components/TemplateCardGrid.tsx\n- @src/features/biblioteca-de-plantillas/hooks/useBibliotecadePlantillas.ts\n- @src/features/biblioteca-de-plantillas/api.ts\n\n## Componentes a Crear\n- TemplateCardGrid (component)\n- TemplateCard (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- useBibliotecadePlantillas from ../hooks/useBibliotecadePlantillas.ts\n\n## Lógica y Datos\nEl hook `useBibliotecadePlantillas` debe realizar una llamada a `api.ts` para fetchear un array de objetos de plantillas. Cada objeto debe contener: `id`, `name`, `type` (\'training\' | \'nutrition\'), `tags` (array de strings), `createdAt`, y un resumen como `duration` o `mealCount`. La página `BibliotecadePlantillasPage` pasará estos datos a `TemplateCardGrid`, que a su vez mapeará cada objeto para renderizar un `TemplateCard`.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Al cargar la página, se debe mostrar un estado de carga mientras se obtienen las plantillas.\n2. Las plantillas se muestran en una cuadrícula de tarjetas.\n3. Cada tarjeta debe mostrar el nombre de la plantilla, su tipo (entrenamiento o nutrición) y sus etiquetas.\n4. Si no hay plantillas, se debe mostrar un mensaje amigable y un botón para \'Crear nueva plantilla\' que redirija al creador correspondiente.\n\n## Sugerencias Adicionales\n- Añadir un pequeño menú de acciones (botón de tres puntos) en cada tarjeta para futuras funcionalidades (editar, borrar, duplicar).\n- Implementar \'infinite scroll\' o paginación si se espera un gran número de plantillas.\n\n## Tarea para Editor IA\nCrea los componentes `TemplateCardGrid.tsx` y `TemplateCard.tsx` en `src/features/biblioteca-de-plantillas/components/`. `TemplateCardGrid` debe aceptar una prop `templates` y renderizar un `TemplateCard` por cada elemento. `TemplateCard` debe mostrar `name`, `type` y `tags`. Utiliza placeholders para los datos.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Filtrado Avanzado de Plantillas\n\n## Descripción\nComo entrenador, quiero filtrar mi biblioteca de plantillas por tipo, etiquetas y nombre para encontrar rápidamente la plantilla específica que busco entre decenas de opciones.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/components/TemplateFilterPanel.tsx\n- @src/features/biblioteca-de-plantillas/hooks/useBibliotecadePlantillas.ts\n\n## Componentes a Crear\n- TemplateFilterPanel (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- useBibliotecadePlantillas from ../hooks/useBibliotecadePlantillas.ts\n- TagInput from src/features/creador-de-planes-de-entrenamiento/components/TagInput.tsx\n\n## Lógica y Datos\nEl estado de los filtros (texto de búsqueda, tipo seleccionado, etiquetas seleccionadas) se gestionará en `BibliotecadePlantillasPage.tsx`. Este estado se pasará al hook `useBibliotecadePlantillas`, que lo utilizará para refinar la lista de plantillas mostrada. Los cambios en los filtros deben disparar una nueva obtención o un filtrado de los datos.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe haber un campo de texto para buscar plantillas por su nombre.\n2. Debe haber un control (ej. botones de radio o un dropdown) para filtrar por tipo: \'Todos\', \'Entrenamiento\', \'Nutrición\'.\n3. Debe haber un selector múltiple para filtrar por etiquetas asignadas a las plantillas.\n4. La lista de plantillas en la cuadrícula debe actualizarse automáticamente al cambiar cualquier filtro.\n\n## Sugerencias Adicionales\n- Añadir un botón para \'Limpiar todos los filtros\' y restaurar la vista completa.\n- Guardar el estado de los filtros en los parámetros de la URL para que se puedan compartir vistas filtradas.\n\n## Tarea para Editor IA\nCrea el componente `TemplateFilterPanel.tsx` en la carpeta de componentes de `biblioteca-de-plantillas`. Debe incluir un `input` de texto, botones para filtrar por tipo y utilizar el componente `TagInput` importado para la selección de etiquetas.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Previsualización Rápida de Contenido de Plantilla\n\n## Descripción\nComo entrenador, quiero previsualizar el contenido de una plantilla en una ventana modal sin salir de la biblioteca, para verificar si es la adecuada antes de asignarla.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/components/TemplatePreviewModal.tsx\n- @src/features/biblioteca-de-plantillas/api.ts\n\n## Componentes a Crear\n- TemplatePreviewModal (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- TemplateCard from ./components/TemplateCard\n\n## Lógica y Datos\nAl hacer clic en \'Previsualizar\' en una `TemplateCard`, se debe obtener el ID de la plantilla. Se realiza una llamada a la API con ese ID para obtener el contenido completo de la plantilla. Los datos se pasan como prop a `TemplatePreviewModal`, que se encarga de formatear y mostrar la información de manera clara y legible.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Hacer clic en un botón \'Previsualizar\' en una `TemplateCard` debe abrir el modal.\n2. El modal debe mostrar el nombre y la descripción de la plantilla.\n3. El contenido de la plantilla (ejercicios/comidas) debe ser visible y estar bien estructurado.\n4. El modal debe poder cerrarse (ej. con un botón \'X\' o haciendo clic fuera del modal).\n\n## Sugerencias Adicionales\n- Añadir botones de acción dentro del modal, como \'Asignar a cliente\' o \'Editar plantilla\'.\n- Mostrar un resumen de macronutrientes para plantillas de nutrición o duración estimada para las de entrenamiento.\n\n## Tarea para Editor IA\nCrea el componente `TemplatePreviewModal.tsx`. Debe aceptar una prop `templateData` y renderizar su contenido. Estructura el modal con un encabezado, un cuerpo para el contenido y un pie de página con un botón de cierre. Usa datos de ejemplo para la visualización.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Duplicar una Plantilla Existente\n\n## Descripción\nComo entrenador, quiero duplicar una plantilla existente para poder crear una variación ligera de un plan sin tener que empezar desde cero.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/components/DuplicateTemplateModal.tsx\n- @src/features/biblioteca-de-plantillas/api.ts\n\n## Componentes a Crear\n- DuplicateTemplateModal (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- TemplateCard from ./components/TemplateCard\n\n## Lógica y Datos\nLa acción \'Duplicar\' en una `TemplateCard` abre el `DuplicateTemplateModal` pasando el ID y nombre de la plantilla original. Al confirmar, se llama a un endpoint de la API (`POST /api/templates/{id}/duplicate`) que se encarga de crear una copia exacta en la base de datos con el nuevo nombre. La UI debe refrescarse para mostrar la nueva plantilla.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe haber una opción \'Duplicar\' en cada `TemplateCard`.\n2. Al hacer clic, se abre un modal pidiendo confirmar y opcionalmente renombrar la nueva plantilla.\n3. Por defecto, el nuevo nombre es el original con el sufijo \' - Copia\'.\n4. Tras confirmar, se crea una nueva plantilla idéntica y aparece en la biblioteca.\n\n## Sugerencias Adicionales\n- Ofrecer la opción de editar la plantilla duplicada inmediatamente después de su creación.\n- Permitir duplicar y asignar a un cliente en un solo flujo de trabajo.\n\n## Tarea para Editor IA\nCrea el componente `DuplicateTemplateModal.tsx`. Debe recibir las props del template original (`id`, `name`) y contener un campo de texto para el nuevo nombre y botones de \'Cancelar\' y \'Confirmar\'. La lógica de confirmación debe invocar una función pasada por props.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Asignación Directa de Plantilla a Cliente\n\n## Descripción\nComo entrenador, quiero asignar una plantilla directamente desde la biblioteca a uno o más clientes para agilizar mi flujo de trabajo de planificación.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/components/AssignTemplateModal.tsx\n- @src/features/gestin-de-clientes-crm/api.ts\n\n## Componentes a Crear\n- AssignTemplateModal (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- TemplateCard from ./components/TemplateCard\n- ClientSearchBar from src/features/gestin-de-clientes-crm/components/ClientSearchBar.tsx\n\n## Lógica y Datos\nEl modal `AssignTemplateModal` debe fetchear la lista de clientes activos del entrenador (usando `gestin-de-clientes-crm/api.ts`). Un campo de búsqueda filtra la lista. Al seleccionar uno o más clientes y confirmar, se realiza una llamada a la API para asignar la plantilla a los clientes seleccionados. Esto podría crear copias del plan y vincularlas a cada perfil de cliente.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe existir un botón \'Asignar\' en cada `TemplateCard` o en el modal de previsualización.\n2. El modal de asignación debe permitir buscar clientes por nombre.\n3. Se puede seleccionar uno o varios clientes de la lista.\n4. Al confirmar, la plantilla se asigna a los clientes seleccionados y se muestra una notificación de éxito.\n\n## Sugerencias Adicionales\n- Permitir establecer una fecha de inicio para el plan al momento de asignarlo.\n- Mostrar una advertencia si el cliente ya tiene un plan activo del mismo tipo.\n\n## Tarea para Editor IA\nCrea el componente `AssignTemplateModal.tsx`. Debe incluir una llamada para buscar clientes (puedes simularla) y mostrar una lista seleccionable. Importa y utiliza `ClientSearchBar` para la funcionalidad de búsqueda. El modal debe tener botones de \'Cancelar\' y \'Asignar\'.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Eliminación Segura de Plantillas\n\n## Descripción\nComo entrenador, quiero eliminar plantillas que ya no uso para mantener mi biblioteca organizada, con una confirmación para evitar borrados accidentales.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/components/ConfirmDeleteDialog.tsx\n- @src/features/biblioteca-de-plantillas/api.ts\n\n## Componentes a Crear\n- ConfirmDeleteDialog (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- TemplateCard from ./components/TemplateCard\n\n## Lógica y Datos\nLa opción \'Eliminar\' en `TemplateCard` abre el `ConfirmDeleteDialog`. Si el usuario confirma, se invoca una función que llama a la API con un método `DELETE` al endpoint `/api/templates/{id}`. Tras una respuesta exitosa, la UI se actualiza para eliminar la tarjeta de la plantilla de la vista.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe haber una opción \'Eliminar\' en el menú de cada `TemplateCard`.\n2. Al hacer clic, se abre un diálogo de confirmación que pregunta \'¿Estás seguro de que quieres eliminar [Nombre de Plantilla]?\'\n3. El diálogo debe tener los botones \'Cancelar\' y \'Eliminar\'.\n4. Si se confirma, la plantilla se elimina de la base de datos y desaparece de la cuadrícula.\n\n## Sugerencias Adicionales\n- Implementar un borrado suave (soft delete) para poder restaurar plantillas eliminadas durante un tiempo.\n- Mostrar una advertencia adicional si la plantilla está siendo utilizada actualmente por algún cliente.\n\n## Tarea para Editor IA\nCrea el componente `ConfirmDeleteDialog.tsx`. Debe aceptar `isOpen`, `onClose`, `onConfirm` y `templateName` como props. El diálogo debe mostrar el mensaje de confirmación y los dos botones de acción.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Gestión de Plantillas con Acciones en Lote\n\n## Descripción\nComo entrenador con muchas plantillas, quiero seleccionar varias a la vez para eliminarlas o etiquetarlas en una sola acción, para así gestionar mi biblioteca de forma más eficiente.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/components/BulkActionsToolbar.tsx\n- @src/features/biblioteca-de-plantillas/hooks/useBibliotecadePlantillas.ts\n\n## Componentes a Crear\n- BulkActionsToolbar (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- TemplateCard from ./components/TemplateCard\n\n## Lógica y Datos\nLa página `BibliotecadePlantillasPage` mantendrá un estado con los IDs de las plantillas seleccionadas. Cuando este array no esté vacío, se renderizará `BulkActionsToolbar`. Los botones en la barra de herramientas (ej. \'Eliminar\') invocarán funciones que realizarán llamadas a la API con el array de IDs seleccionados.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Cada `TemplateCard` debe tener un checkbox para ser seleccionada.\n2. Cuando al menos una plantilla está seleccionada, debe aparecer la barra de `BulkActionsToolbar`.\n3. La barra de herramientas debe mostrar el número de plantillas seleccionadas.\n4. La acción de \'Eliminar Seleccionadas\' debe pedir una única confirmación y luego borrar todas las plantillas seleccionadas.\n\n## Sugerencias Adicionales\n- Añadir una acción de \'Deseleccionar todo\'.\n- Implementar la acción en lote para \'Añadir/Quitar etiquetas\'.\n\n## Tarea para Editor IA\nCrea el componente `BulkActionsToolbar.tsx`. Debe aceptar `selectedCount` y funciones para las acciones (`onDeleteSelected`) como props. Haz que solo se renderice si `selectedCount > 0`. Incluye un botón para eliminar. Modifica `TemplateCard` para incluir un `checkbox` y un estado visual de selección.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Edición de Metadatos de una Plantilla\n\n## Descripción\nComo entrenador, quiero editar el nombre y las etiquetas de una plantilla directamente desde la biblioteca para mantener mi información organizada y actualizada sin tener que volver al editor de planes.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/components/EditTemplateMetadataModal.tsx\n- @src/features/biblioteca-de-plantillas/api.ts\n\n## Componentes a Crear\n- EditTemplateMetadataModal (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- TemplateCard from ./components/TemplateCard\n- TagInput from src/features/creador-de-planes-de-entrenamiento/components/TagInput.tsx\n\n## Lógica y Datos\nAl seleccionar \'Editar\' en una `TemplateCard`, se abre el `EditTemplateMetadataModal` con los datos actuales de la plantilla. Al guardar los cambios, se llama a un endpoint de la API (`PUT /api/templates/{id}`) con los nuevos metadatos. La UI debe actualizarse para reflejar los cambios en la `TemplateCard` correspondiente.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe haber una opción \'Editar\' en el menú de cada `TemplateCard`.\n2. Al hacer clic, se abre un modal con campos para editar el nombre y las etiquetas de la plantilla.\n3. Los campos del formulario están pre-rellenados con los datos actuales.\n4. Al guardar, los cambios se persisten y la `TemplateCard` en la biblioteca se actualiza visualmente.\n\n## Sugerencias Adicionales\n- Permitir la edición de una descripción más larga para la plantilla.\n- Añadir validación para que el nombre de la plantilla no esté vacío.\n\n## Tarea para Editor IA\nCrea el componente `EditTemplateMetadataModal.tsx`. Debe aceptar una prop `template` con los datos actuales. Incluye un `input` para el nombre y reutiliza el componente `TagInput` para las etiquetas. Debe tener botones \'Cancelar\' y \'Guardar\'.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Ver Estadísticas de Uso de Plantillas\n\n## Descripción\nComo entrenador, quiero ver cuántos clientes tienen asignada cada plantilla para entender cuáles son mis planes más populares y efectivos.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/components/TemplateCard.tsx\n- @src/features/biblioteca-de-plantillas/components/UsageStatsIndicator.tsx\n- @src/features/biblioteca-de-plantillas/hooks/useBibliotecadePlantillas.ts\n\n## Componentes a Crear\n- UsageStatsIndicator (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- TemplateCard from ./components/TemplateCard\n- useBibliotecadePlantillas from ../hooks/useBibliotecadePlantillas.ts\n\n## Lógica y Datos\nLa llamada a la API que obtiene la lista de plantillas (`GET /api/templates`) debe incluir en su respuesta un campo `activeUsageCount` para cada plantilla. Este dato se pasará a `TemplateCard` y, a su vez, a `UsageStatsIndicator` para su visualización.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Cada `TemplateCard` debe mostrar un indicador de cuántos clientes tienen esa plantilla asignada activamente.\n2. Si ninguna persona la usa, puede mostrar \'0\' o no mostrarse.\n3. El dato debe ser correcto y reflejar el estado actual de las asignaciones.\n4. Hacer hover sobre el indicador podría mostrar un tooltip con más detalles (ej. \'Asignado a 5 clientes activos\').\n\n## Sugerencias Adicionales\n- Al hacer clic en el indicador, se podría redirigir a una vista filtrada del CRM que muestre solo los clientes con esa plantilla.\n- Mostrar también un \'uso total histórico\' además del uso activo.\n\n## Tarea para Editor IA\nCrea el componente `UsageStatsIndicator.tsx`. Debe aceptar una prop `count`. Renderizará un icono de usuario y el número. Intégralo dentro del componente `TemplateCard.tsx` existente, que ahora deberá aceptar `activeUsageCount`.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas/components\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Organización de Plantillas en Carpetas\n\n## Descripción\nComo entrenador, quiero organizar mis plantillas en carpetas personalizadas (ej. \'Fuerza para principiantes\', \'Pérdida de peso\', \'Clientes VIP\') para estructurar mi biblioteca y navegar por ella de forma más intuitiva.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/components/TemplateFolderBrowser.tsx\n- @src/features/biblioteca-de-plantillas/api.ts\n\n## Componentes a Crear\n- TemplateFolderBrowser (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- useBibliotecadePlantillas from ../hooks/useBibliotecadePlantillas.ts\n\n## Lógica y Datos\nLa página `BibliotecadePlantillasPage` tendrá un diseño de dos columnas: `TemplateFolderBrowser` a la izquierda y `TemplateCardGrid` a la derecha. Al hacer clic en una carpeta en el navegador, se actualiza el estado `currentFolderId` en la página, lo que provoca que `useBibliotecadePlantillas` vuelva a buscar las plantillas para esa carpeta. Se necesitarán nuevos endpoints en la API para gestionar carpetas (CRUD).\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. La página de la biblioteca muestra un panel de navegación de carpetas.\n2. El usuario puede crear una nueva carpeta.\n3. Hacer clic en una carpeta actualiza la vista de la cuadrícula para mostrar solo las plantillas dentro de esa carpeta.\n4. Debe ser posible arrastrar y soltar una plantilla a una carpeta para organizarla (mejora futura, pero la base debe permitirlo).\n\n## Sugerencias Adicionales\n- Añadir una ruta de navegación (breadcrumbs) en la parte superior de la cuadrícula para mostrar la ubicación actual (ej. \'Inicio / Fuerza / Día de Pierna\').\n- Permitir anidar carpetas.\n\n## Tarea para Editor IA\nCrea el componente `TemplateFolderBrowser.tsx`. Debe mostrar una lista estática de carpetas por ahora. Cada elemento de la lista debe ser clickeable e invocar una función `onSelectFolder` pasada por props. Incluye un botón para \'Crear Carpeta\'.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Analíticas de Rendimiento de Plantillas\n\n## Descripción\nComo entrenador orientado a datos, quiero ver un resumen analítico del rendimiento de mis plantillas para poder identificar cuáles generan mejores resultados y adherencia en mis clientes.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/api.ts\n- @src/features/biblioteca-de-plantillas/hooks/useBibliotecadePlantillas.ts\n- @src/features/biblioteca-de-plantillas/components/TemplateCard.tsx\n\n## Componentes a Crear\n- TemplateAnalyticsModal (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- TemplateCard from src/features/biblioteca-de-plantillas/components/TemplateCard.tsx\n- UsageStatsIndicator from src/features/biblioteca-de-plantillas/components/UsageStatsIndicator.tsx\n\n## Lógica y Datos\nSe necesita un nuevo endpoint en `api.ts` (`/api/templates/{id}/analytics`) que agregue datos de progreso y seguimiento de todos los clientes asignados a esa plantilla. El backend deberá calcular métricas como: porcentaje de entrenamientos completados, progreso promedio hacia metas, y adherencia a macros. El hook `useBibliotecadePlantillas` deberá incluir una función para solicitar estos datos.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Desde la `TemplateCard`, puedo hacer clic en un indicador de rendimiento para abrir una modal de analíticas.\n2. La modal debe mostrar al menos 3 KPIs: Tasa de adherencia, Progreso promedio de clientes, y un gráfico de la popularidad de la plantilla a lo largo del tiempo.\n3. Los datos deben ser agregados de forma anónima de todos los clientes que han utilizado la plantilla.\n4. Debe haber un botón para cerrar la modal y volver a la vista de la biblioteca.\n\n## Sugerencias Adicionales\n- Permitir comparar las analíticas de dos plantillas lado a lado.\n- Añadir un filtro en la biblioteca para ordenar las plantillas por \'Mejor Rendimiento\' o \'Mayor Adherencia\'.\n\n## Tarea para Editor IA\nCrea un nuevo componente `TemplateAnalyticsModal` que reciba un `templateId` y use el hook `useBibliotecadePlantillas` para obtener y mostrar datos de rendimiento. Utiliza una librería de gráficos como Chart.js o Recharts. Modifica `TemplateCard.tsx` para incluir un botón que dispare la apertura de esta modal.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Personalización Dinámica de Plantillas al Asignar\n\n## Descripción\nComo entrenador eficiente, quiero que al asignar una plantilla de entrenamiento, los pesos de los ejercicios se ajusten automáticamente basados en el 1RM (1 Rep Max) registrado de mi cliente, para personalizar el plan al instante.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/components/AssignTemplateModal.tsx\n- @src/features/creador-de-planes-de-entrenamiento/api.ts\n- @src/features/perfil-del-cliente/api.ts\n\n## Módulos a Importar\n- AssignTemplateModal from src/features/biblioteca-de-plantillas/components/AssignTemplateModal.tsx\n- ExerciseDetailEditor from src/features/creador-de-planes-de-entrenamiento/components/ExerciseDetailEditor.tsx\n\n## Lógica y Datos\nRequiere una modificación en el modelo de datos de los ejercicios dentro de una plantilla para que el campo \'peso\' pueda almacenar una fórmula (string) en lugar de solo un número. Al asignar, el `AssignTemplateModal` debe: 1. Obtener los 1RM del cliente (`/api/clients/{id}/metrics`). 2. Parsear las fórmulas de la plantilla. 3. Calcular los valores finales. 4. Crear la instancia del plan para el cliente con los pesos ya calculados.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. En la modal de asignación, al seleccionar un cliente, debe aparecer la opción de \'Personalización Automática\'.\n2. Si la plantilla contiene fórmulas de 1RM y el cliente tiene esos 1RM registrados, al activar la opción se debe mostrar una vista previa de los cambios.\n3. Si el cliente no tiene un 1RM requerido, se debe mostrar una advertencia clara (ej. \'1RM para Press de Banca no encontrado\').\n4. Al confirmar la asignación, el plan generado para el cliente debe contener los valores de peso calculados, no la fórmula.\n\n## Sugerencias Adicionales\n- Expandir la funcionalidad para incluir otros marcadores, como ajustar calorías en planes de nutrición según el TDEE del cliente.\n- Permitir al entrenador anular manualmente un valor calculado antes de asignar.\n\n## Tarea para Editor IA\nModifica el componente `AssignTemplateModal` para incluir un estado que controle el toggle de personalización. Al seleccionar un cliente, realiza una llamada a la API para obtener sus métricas. Implementa la lógica de parsing y cálculo de las fórmulas de la plantilla y muestra los resultados antes de la asignación final.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas/components\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Control de Versiones de Plantillas\n\n## Descripción\nComo entrenador que mejora constantemente sus métodos, quiero guardar diferentes versiones de una misma plantilla para poder hacer seguimiento de los cambios, revertir a una versión anterior o asignar versiones específicas a diferentes clientes.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/api.ts\n- @src/features/biblioteca-de-plantillas/components/TemplateCard.tsx\n\n## Componentes a Crear\n- TemplateVersionHistoryModal (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- TemplateCard from src/features/biblioteca-de-plantillas/components/TemplateCard.tsx\n- SaveAsTemplateModal from src/features/creador-de-planes-de-entrenamiento/components/SaveAsTemplateModal.tsx\n\n## Lógica y Datos\nSe necesita una nueva tabla en la base de datos `TemplateVersions` relacionada con la tabla `Templates`. Cada vez que se guarda una \'nueva versión\', se crea un nuevo registro en `TemplateVersions` con una copia del contenido de la plantilla y una referencia a la plantilla \'padre\'. La API (`api.ts`) necesita endpoints para `GET /api/templates/{id}/versions` y `POST /api/templates/{id}/versions`.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Al guardar una plantilla existente, debo tener la opción de guardar como una nueva versión.\n2. La `TemplateCard` debe mostrar el número de la última versión.\n3. Puedo hacer clic en el número de versión para ver el historial completo en una modal.\n4. Desde el historial, puedo previsualizar, restaurar o asignar una versión antigua a un cliente.\n\n## Sugerencias Adicionales\n- Permitir añadir notas de \'changelog\' a cada nueva versión para documentar los cambios.\n- Mostrar una alerta en el perfil de los clientes que tengan asignada una versión obsoleta de una plantilla.\n\n## Tarea para Editor IA\nImplementa la lógica en el `SaveAsTemplateModal` para ofrecer la opción de versionado. Crea el componente `TemplateVersionHistoryModal` que obtenga y liste las versiones desde la API. Actualiza `TemplateCard` para mostrar el número de versión y lanzar la modal.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Compartir Plantilla con Colegas mediante Código Único\n\n## Descripción\nComo entrenador que colabora con otros, quiero generar un código único para compartir una de mis plantillas con otro entrenador que use FitFlow Pro, para fomentar la colaboración y el intercambio de conocimiento.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/api.ts\n- @src/features/biblioteca-de-plantillas/components/BulkActionsToolbar.tsx\n\n## Componentes a Crear\n- ShareTemplateModal (component)\n- ImportFromCodeButton (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- TemplateCard from src/features/biblioteca-de-plantillas/components/TemplateCard.tsx\n\n## Lógica y Datos\nEl backend necesita una nueva tabla `TemplateShareCodes` que vincule un código único y de un solo uso (o con caducidad) a un `templateId` y al `userId` del propietario. Se necesitan dos nuevos endpoints: 1. `POST /api/templates/{id}/share` para generar un código. 2. `POST /api/templates/import` que recibe un código, lo valida, duplica la plantilla para el usuario actual y marca el código como usado.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Puedo seleccionar \'Compartir\' desde una plantilla para generar un código único.\n2. El código generado puede ser copiado fácilmente.\n3. En la página de la biblioteca, hay un botón para \'Importar desde código\'.\n4. Al pegar un código válido, la plantilla se añade a mi biblioteca como una nueva plantilla editable.\n5. Un código solo puede ser usado una vez (o un número definido de veces).\n\n## Sugerencias Adicionales\n- Permitir compartir plantillas a través de un enlace directo en lugar de solo un código.\n- Crear un \'Mercado de Plantillas\' comunitario donde los entrenadores puedan publicar sus mejores plantillas (potencial vía de monetización).\n\n## Tarea para Editor IA\nCrea el componente `ShareTemplateModal` que se active desde `TemplateCard`. Implementa la lógica de la API para generar el código. Crea el `ImportFromCodeButton` y su modal correspondiente para manejar el proceso de importación. Asegúrate de que el backend maneje la validación y duplicación de la plantilla de forma segura.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Asistente de Conversión de Plantilla a Plan\n\n## Descripción\nComo entrenador que busca el equilibrio perfecto entre eficiencia y personalización, quiero un asistente paso a paso al asignar una plantilla para hacer ajustes rápidos y específicos para el cliente, para que el plan final esté perfectamente adaptado sin tener que crearlo desde cero.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/components/AssignTemplateModal.tsx\n\n## Componentes a Crear\n- TemplateToPlanWizardModal (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/biblioteca-de-plantillas/components\n\n## Módulos a Importar\n- AssignTemplateModal from src/features/biblioteca-de-plantillas/components/AssignTemplateModal.tsx\n- AlternativeExercisePicker from src/features/creador-de-planes-de-entrenamiento/components/AlternativeExercisePicker.tsx\n\n## Lógica y Datos\nLa lógica se centrará en el frontend. Al iniciar el asistente, se crea una copia temporal del estado de la plantilla en memoria. Cada paso del asistente modifica este estado temporal. Solo en el paso final, cuando el entrenador confirma, se envía la versión modificada del plan a la API para crear el plan asignado al cliente. No se modifica la plantilla original. La API (`/api/clients/{id}/plans`) recibiría el objeto del plan completo ya modificado.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Al hacer clic en \'Asignar\' en una plantilla, se inicia un asistente de varios pasos.\n2. El asistente me permite, como mínimo, sustituir un ejercicio por una alternativa y ajustar los macronutrientes totales de un plan de nutrición.\n3. Puedo navegar hacia adelante y hacia atrás en los pasos del asistente sin perder los cambios realizados.\n4. La plantilla original en la biblioteca no se ve afectada por los cambios realizados durante la asignación.\n5. El plan final asignado al cliente refleja todos los ajustes realizados en el asistente.\n\n## Sugerencias Adicionales\n- Sugerir sustituciones de ejercicios de forma inteligente, basadas en el grupo muscular trabajado.\n- Guardar los ajustes como un \'parche\' que se pueda aplicar a otras asignaciones de la misma plantilla.\n\n## Tarea para Editor IA\nRefactoriza `AssignTemplateModal` para que invoque un nuevo componente `TemplateToPlanWizardModal`. Construye este nuevo componente usando un gestor de estado para manejar los diferentes pasos y los datos del plan temporal. Reutiliza el componente `AlternativeExercisePicker` en uno de los pasos del asistente.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas/components\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Archivado y Desarchivado de Plantillas\n\n## Descripción\nComo entrenador con una biblioteca en crecimiento, quiero archivar plantillas antiguas o de temporada en lugar de eliminarlas, para despejar mi vista principal sin perder el trabajo por si lo necesito en el futuro.\n\n## Contexto de la Página\nBiblioteca de Plantillas\n\n## Archivos Afectados\n- @src/features/biblioteca-de-plantillas/BibliotecadePlantillasPage.tsx\n- @src/features/biblioteca-de-plantillas/api.ts\n- @src/features/biblioteca-de-plantillas/components/TemplateFilterPanel.tsx\n- @src/features/biblioteca-de-plantillas/components/BulkActionsToolbar.tsx\n\n## Módulos a Importar\n- TemplateFilterPanel from src/features/biblioteca-de-plantillas/components/TemplateFilterPanel.tsx\n- TemplateCard from src/features/biblioteca-de-plantillas/components/TemplateCard.tsx\n- BulkActionsToolbar from src/features/biblioteca-de-plantillas/components/BulkActionsToolbar.tsx\n\n## Lógica y Datos\nSe necesita añadir un campo booleano `isArchived` (por defecto `false`) al modelo de datos de la plantilla en el backend. La API para obtener las plantillas (`GET /api/templates`) debe aceptar un parámetro de consulta, como `?status=archived` o `?status=active`. Los endpoints para archivar/desarchivar serían un `PATCH /api/templates/{id}` que actualiza el campo `isArchived`.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Por defecto, no veo las plantillas archivadas en mi biblioteca.\n2. Puedo archivar una plantilla individualmente desde su tarjeta o varias a la vez usando las acciones en lote.\n3. Hay un filtro que me permite cambiar la vista para ver solo las plantillas archivadas.\n4. Cuando veo una plantilla archivada, tengo la opción de \'Desarchivarla\' para que vuelva a la vista principal.\n5. Las plantillas archivadas no aparecen en la modal de asignación a clientes.\n\n## Sugerencias Adicionales\n- Implementar un sistema de auto-archivado para plantillas que no se han usado en más de un año.\n- Al archivar, preguntar opcionalmente por qué se archiva para recoger feedback.\n\n## Tarea para Editor IA\nAñade un toggle \'Ver archivadas\' en `TemplateFilterPanel.tsx`. Modifica la llamada a la API en `useBibliotecadePlantillas.ts` para pasar el estado del filtro. Actualiza las acciones en `TemplateCard.tsx` y `BulkActionsToolbar.tsx` para que llamen al endpoint de PATCH que modifica el estado `isArchived` en lugar de eliminar.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/biblioteca-de-plantillas\n Cuando termines, escribe: TAREA COMPLETADA.'
)
fi
# ──────────────────────────────────────────────────────────────────────

for i in "${!prompts[@]}"; do
  prompt="${prompts[$i]}"
  [[ -z $prompt ]] && continue       # salta vacíos

  file="$TMPDIR/prompt_$i.md"
  printf '%s\n' "$prompt" > "$file"

  echo ">>> Ejecutando prompt $((i+1))"
  ./gemini_one.sh "$file"
  echo "---------------------------------------------"
done
